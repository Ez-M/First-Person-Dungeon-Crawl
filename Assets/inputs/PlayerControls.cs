//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""movement"",
            ""id"": ""4a3dc4e6-20c0-4515-9d01-44d0d949b070"",
            ""actions"": [
                {
                    ""name"": ""move forward"",
                    ""type"": ""Button"",
                    ""id"": ""d748e6f6-4be8-4f49-9991-d0fced3daf72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""move right"",
                    ""type"": ""Button"",
                    ""id"": ""814d09cd-a149-446e-84c1-96a55228c299"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""move back"",
                    ""type"": ""Button"",
                    ""id"": ""79671983-e3f1-4239-b487-c75d7dabf4e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""move left"",
                    ""type"": ""Button"",
                    ""id"": ""f05640bc-d76d-4e62-a9e3-4e9c8786273e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""47fb2369-85ec-4cc2-a9a4-961d44cbd44c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51858ec7-7103-4ddf-9b5e-f3c2034d2b94"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5809f6b2-8fd1-4bb2-8c04-457efa7a48d1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81d0b7f9-256a-4b52-9b20-4eed43612615"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""actions"",
            ""id"": ""9db16b36-4b88-417b-806c-486a8b4e4223"",
            ""actions"": [
                {
                    ""name"": ""confirmUse"",
                    ""type"": ""Button"",
                    ""id"": ""63947c87-cf4d-40fb-bedf-e7e01da9c659"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""db968196-978e-453a-a7ad-b2e07a0c7716"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""confirmUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // movement
        m_movement = asset.FindActionMap("movement", throwIfNotFound: true);
        m_movement_moveforward = m_movement.FindAction("move forward", throwIfNotFound: true);
        m_movement_moveright = m_movement.FindAction("move right", throwIfNotFound: true);
        m_movement_moveback = m_movement.FindAction("move back", throwIfNotFound: true);
        m_movement_moveleft = m_movement.FindAction("move left", throwIfNotFound: true);
        // actions
        m_actions = asset.FindActionMap("actions", throwIfNotFound: true);
        m_actions_confirmUse = m_actions.FindAction("confirmUse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // movement
    private readonly InputActionMap m_movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_movement_moveforward;
    private readonly InputAction m_movement_moveright;
    private readonly InputAction m_movement_moveback;
    private readonly InputAction m_movement_moveleft;
    public struct MovementActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @moveforward => m_Wrapper.m_movement_moveforward;
        public InputAction @moveright => m_Wrapper.m_movement_moveright;
        public InputAction @moveback => m_Wrapper.m_movement_moveback;
        public InputAction @moveleft => m_Wrapper.m_movement_moveleft;
        public InputActionMap Get() { return m_Wrapper.m_movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @moveforward.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveforward;
                @moveforward.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveforward;
                @moveforward.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveforward;
                @moveright.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveright;
                @moveright.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveright;
                @moveright.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveright;
                @moveback.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveback;
                @moveback.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveback;
                @moveback.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveback;
                @moveleft.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveleft;
                @moveleft.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveleft;
                @moveleft.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMoveleft;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @moveforward.started += instance.OnMoveforward;
                @moveforward.performed += instance.OnMoveforward;
                @moveforward.canceled += instance.OnMoveforward;
                @moveright.started += instance.OnMoveright;
                @moveright.performed += instance.OnMoveright;
                @moveright.canceled += instance.OnMoveright;
                @moveback.started += instance.OnMoveback;
                @moveback.performed += instance.OnMoveback;
                @moveback.canceled += instance.OnMoveback;
                @moveleft.started += instance.OnMoveleft;
                @moveleft.performed += instance.OnMoveleft;
                @moveleft.canceled += instance.OnMoveleft;
            }
        }
    }
    public MovementActions @movement => new MovementActions(this);

    // actions
    private readonly InputActionMap m_actions;
    private IActionsActions m_ActionsActionsCallbackInterface;
    private readonly InputAction m_actions_confirmUse;
    public struct ActionsActions
    {
        private @PlayerControls m_Wrapper;
        public ActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @confirmUse => m_Wrapper.m_actions_confirmUse;
        public InputActionMap Get() { return m_Wrapper.m_actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
            {
                @confirmUse.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnConfirmUse;
                @confirmUse.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnConfirmUse;
                @confirmUse.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnConfirmUse;
            }
            m_Wrapper.m_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @confirmUse.started += instance.OnConfirmUse;
                @confirmUse.performed += instance.OnConfirmUse;
                @confirmUse.canceled += instance.OnConfirmUse;
            }
        }
    }
    public ActionsActions @actions => new ActionsActions(this);
    public interface IMovementActions
    {
        void OnMoveforward(InputAction.CallbackContext context);
        void OnMoveright(InputAction.CallbackContext context);
        void OnMoveback(InputAction.CallbackContext context);
        void OnMoveleft(InputAction.CallbackContext context);
    }
    public interface IActionsActions
    {
        void OnConfirmUse(InputAction.CallbackContext context);
    }
}
